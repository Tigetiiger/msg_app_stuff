-- Enable UUID generation (kept in case you add UUIDs later)
CREATE EXTENSION IF NOT EXISTS "pgcrypto";

-- 0) app schema
CREATE SCHEMA IF NOT EXISTS app;
SET search_path TO app, public;

-- 1) Users
CREATE TABLE IF NOT EXISTS app.users (
  id                   BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  username             TEXT NOT NULL UNIQUE,
  display_name         TEXT,
  mail                 TEXT,
  password_hash        TEXT NOT NULL,
  password_updated_at  TIMESTAMPTZ NOT NULL DEFAULT now(),
  created_at           TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- 2) Conversations (DMs & Groups)
-- type: 1=dm, 2=group
CREATE TABLE IF NOT EXISTS app.conversations (
  id               BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  type             SMALLINT NOT NULL CHECK (type IN (1, 2)),
  created_by       BIGINT NOT NULL REFERENCES app.users(id),
  title            TEXT,
  created_at       TIMESTAMPTZ NOT NULL DEFAULT now(),
  last_written_to  TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- 3) Participants (membership)
-- role: 1=member, 2=admin, 3=owner
CREATE TABLE IF NOT EXISTS app.conversation_participants (
  conversation_id  BIGINT NOT NULL,
  user_id          BIGINT NOT NULL,
  role             SMALLINT NOT NULL DEFAULT 1 CHECK (role IN (1, 2, 3)),
  joined_at        TIMESTAMPTZ NOT NULL DEFAULT now(),
  PRIMARY KEY (conversation_id, user_id),
  CONSTRAINT fk_participant_convo
    FOREIGN KEY (conversation_id) REFERENCES app.conversations(id) ON DELETE CASCADE,
  CONSTRAINT fk_participant_user
    FOREIGN KEY (user_id)        REFERENCES app.users(id)         ON DELETE CASCADE
);

CREATE INDEX IF NOT EXISTS idx_participants_user
  ON app.conversation_participants (user_id);
CREATE INDEX IF NOT EXISTS idx_participants_convo
  ON app.conversation_participants (conversation_id);

-- 4) Messages (single table for all chats)
CREATE TABLE IF NOT EXISTS app.messages (
  id               BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  conversation_id  BIGINT NOT NULL REFERENCES app.conversations(id) ON DELETE CASCADE,
  sender_id        BIGINT NOT NULL REFERENCES app.users(id),
  body             TEXT NOT NULL,
  created_at       TIMESTAMPTZ NOT NULL DEFAULT now(),
  edited_at        TIMESTAMPTZ DEFAULT NULL,
  deleted_at       TIMESTAMPTZ DEFAULT NULL
);

-- Ensure only participants can send messages
ALTER TABLE app.messages
  ADD CONSTRAINT fk_sender_in_convo
  FOREIGN KEY (conversation_id, sender_id)
  REFERENCES app.conversation_participants (conversation_id, user_id);

-- Paging & retrieval indexes
CREATE INDEX IF NOT EXISTS idx_messages_convo_created_at
  ON app.messages (conversation_id, created_at);
CREATE INDEX IF NOT EXISTS idx_messages_convo_id
  ON app.messages (conversation_id, id);
CREATE INDEX IF NOT EXISTS idx_conversations_last_written_to
  ON app.conversations (last_written_to);
